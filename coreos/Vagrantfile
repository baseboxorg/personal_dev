# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'

CLOUD_CONFIG_PATH = './user-data'
CONFIG = 'config.rb'

# Defaults for config options defined in CONFIG
$num_instances = 1
$update_channel = 'alpha'
$enable_serial_logging = false
$vb_gui = false
$vb_memory = 8192
$vb_cpus = 1
$expose_docker_tcp = 4243

# Attempt to apply the deprecated environment variable NUM_INSTANCES to
# $num_instances while allowing config.rb to override it
if ENV['NUM_INSTANCES'].to_i > 0 && ENV['NUM_INSTANCES']
  $num_instances = ENV['NUM_INSTANCES'].to_i
end

require_relative CONFIG if File.exist?(CONFIG)

Vagrant.configure('2') do |config|
  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_version = '>= 308.0.1'
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json" % $update_channel

  config.vm.provider :vmware_fusion do |_vb, override|
    override.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json" % $update_channel
  end

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?('vagrant-vbguest') then
    config.vbguest.auto_update = false
  end

  (1..$num_instances).each do |i|
    config.vm.define vm_name = "core-%02d" % i do |config|
      config.vm.hostname = vm_name

      if $enable_serial_logging
        logdir = File.join(File.dirname(__FILE__), 'log')
        FileUtils.mkdir_p(logdir)

        serialFile = File.join(logdir, "%s-serial.txt" % vm_name)
        FileUtils.touch(serialFile)

        config.vm.provider :vmware_fusion do |v, override|
          v.vmx['serial0.present'] = 'TRUE'
          v.vmx['serial0.fileType'] = 'file'
          v.vmx['serial0.fileName'] = serialFile
          v.vmx['serial0.tryNoRxLoss'] = 'FALSE'
        end

        config.vm.provider :virtualbox do |vb, _override|
          vb.customize ['modifyvm', :id, '--uart1', '0x3F8', '4']
          vb.customize ['modifyvm', :id, '--uartmode1', serialFile]
        end
      end

      if $expose_docker_tcp
        config.vm.network 'forwarded_port',
                          guest: 4243, host: ($expose_docker_tcp + i - 1),
                          auto_correct: true
      end

      config.vm.provider :vmware_fusion do |vb|
        vb.gui = $vb_gui
      end

      config.vm.provider :virtualbox do |vb|
        vb.gui = $vb_gui
        vb.memory = $vb_memory
        vb.cpus = $vb_cpus
      end

      ip = "172.17.8.#{i + 100}"
      config.vm.network :private_network, ip: ip
      config.vm.provider :virtualbox do |vb|
        vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
      end

      config.vm.synced_folder File.expand_path('~'), File.expand_path('~'),
                              id: 'homedir', nfs: true,
                              mount_options: ['nolock,vers=3,udp']
      config.vm.synced_folder '/private', '/private',
                              id: 'launchd', nfs: true,
                              mount_options: ['nolock,vers=3,udp']

      if File.exist?(CLOUD_CONFIG_PATH)
        config.vm.provision :file,
                            source: "#{CLOUD_CONFIG_PATH}",
                            destination: '/tmp/vagrantfile-user-data'
        config.vm.provision :shell,
                            inline: 'mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/',
                            privileged: true
      end

    end
  end
end
