# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'

CLOUD_CONFIG_PATH = './user-data'
CONFIG = 'config.rb'

# A class to hold the config.vm.box details
class Box
  attr_accessor :config
  attr_reader :enable_serial_logging, :vb_gui, :vb_memory, :vb_cpus, \
              :expose_docker_tcp

  def initialize(config)
    @config = config
    @enable_serial_logging = false
    @vb_gui = false
    @vb_memory = 8192
    @vb_cpus = 1
    @expose_docker_tcp = 4243
  end

  def name
    "coreos-#{update_channel}"
  end

  def vmware_name
    "vmware-#{name}"
  end

  def version
    '>= 472.0.0'
  end

  def url
    "http://#{update_channel}.release.core-os.net/amd64-usr/current/#{filename}"
  end

  def vmware_url
    "http://#{update_channel}.release.core-os.net/amd64-usr/current/#{vmware_filename}"
  end

  def create_serial_logfile(vm_name)
    logdir = File.join(File.dirname(__FILE__), 'log')
    FileUtils.mkdir_p(logdir)
    serial_file = File.join(logdir, "#{vm_name}-serial.txt")
    FileUtils.touch(serial_file)
    serial_file
  end

  def serial_logging(cfg)
    return unless enable_serial_logging
    serial_file = create_serial_logfile(cfg.vm.hostname)
    cfg.vm.provider :vmware_fusion do |v|
      v.vmx['serial0.present'] = 'TRUE'
      v.vmx['serial0.fileType'] = 'file'
      v.vmx['serial0.fileName'] = serial_file
      v.vmx['serial0.tryNoRxLoss'] = 'FALSE'
    end
    cfg.vm.provider :virtualbox do |vb|
      vb.customize ['modifyvm', :id, '--uart1', '0x3F8', '4']
      vb.customize ['modifyvm', :id, '--uartmode1', serial_file]
    end
  end

  private

  def filename
    'coreos_production_vagrant.json'
  end

  def vmware_filename
    'coreos_production_vagrant_vmware_fusion.json'
  end

  def update_channel
    'alpha'
  end
end

def num_instances
  return ENV['NUM_INSTANCES'].to_i if ENV['NUM_INSTANCES'].to_i > 0
  1
end

Vagrant.configure('2') do |config|
  box = Box.new(config)
  config.vm.box_version = box.version

  config.vm.provider :vmware_fusion do
    config.vm.box = box.vmware_name
    config.vm.box_url = box.vmware_url
  end

  config.vm.provider :virtualbox do |v|
    config.vm.box = box.name
    config.vm.box_url = box.url
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  config.vbguest.auto_update = false if Vagrant.has_plugin?('vagrant-vbguest')

  (1..num_instances).each do |i|
    config.vm.define vm_name = format('core-%02d', i) do |cfg|
      cfg.vm.hostname = vm_name

      box.serial_logging(cfg)

      if box.expose_docker_tcp
        cfg.vm.network 'forwarded_port',
                       guest: 4243, host: (box.expose_docker_tcp + i - 1),
                       auto_correct: true
      end

      cfg.vm.provider :vmware_fusion do |vb|
        vb.gui = box.vb_gui
      end

      cfg.vm.provider :virtualbox do |vb|
        vb.gui = box.vb_gui
        vb.memory = box.vb_memory
        vb.cpus = box.vb_cpus
      end

      ip = "172.17.8.#{i + 100}"
      cfg.vm.network :private_network, ip: ip
      cfg.vm.provider :virtualbox do |vb|
        vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
      end

      cfg.vm.synced_folder File.expand_path('~'), File.expand_path('~'),
                           id: 'homedir', type: 'nfs',
                           mount_options: ['nolock,vers=3,udp']
      cfg.vm.synced_folder '/private', '/private',
                           id: 'launchd', type: 'nfs',
                           mount_options: ['nolock,vers=3,udp']

      if File.exist?(CLOUD_CONFIG_PATH)
        cfg.vm.provision :file,
                         source: "#{CLOUD_CONFIG_PATH}",
                         destination: '/tmp/vagrantfile-user-data'
        cfg.vm.provision :shell,
                         inline: 'mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/',
                         privileged: true
      end
    end
  end
end
